/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: j2534.proto */

#ifndef PROTOBUF_C_j2534_2eproto__INCLUDED
#define PROTOBUF_C_j2534_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Message Message;
typedef struct Config Config;
typedef struct BaseRequest BaseRequest;
typedef struct BaseResponse BaseResponse;
typedef struct ConnectRequest ConnectRequest;
typedef struct ConnectResponse ConnectResponse;
typedef struct DisconnectRequest DisconnectRequest;
typedef struct ReadRequest ReadRequest;
typedef struct ReadResponse ReadResponse;
typedef struct WriteRequest WriteRequest;
typedef struct WriteResponse WriteResponse;
typedef struct StartPeriodicRequest StartPeriodicRequest;
typedef struct StartPeriodicResponse StartPeriodicResponse;
typedef struct StopPeriodicRequest StopPeriodicRequest;
typedef struct StartFilterRequest StartFilterRequest;
typedef struct StartFilterResponse StartFilterResponse;
typedef struct StopFilterRequest StopFilterRequest;
typedef struct SetVoltageRequest SetVoltageRequest;
typedef struct ReadVersionResponse ReadVersionResponse;
typedef struct GetErrorResponse GetErrorResponse;
typedef struct IoctlRequest IoctlRequest;
typedef struct IoctlResponse IoctlResponse;
typedef struct IoctlGetConfigRequest IoctlGetConfigRequest;
typedef struct IoctlGetConfigResponse IoctlGetConfigResponse;
typedef struct IoctlSetConfigRequest IoctlSetConfigRequest;
typedef struct IoctlReadVbattResponse IoctlReadVbattResponse;


/* --- enums --- */

typedef enum _Call {
  CALL__InvalidCall = 0,
  CALL__Connect = 1,
  CALL__Disconnect = 2,
  CALL__Read = 3,
  CALL__Write = 4,
  CALL__StartPeriodic = 5,
  CALL__StopPeriodic = 6,
  CALL__StartFilter = 7,
  CALL__StopFilter = 8,
  CALL__SetVoltage = 9,
  CALL__ReadVersion = 10,
  CALL__GetError = 11,
  CALL__Ioctl = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CALL)
} Call;
typedef enum _IoctlId {
  IOCTL_ID__InvalidIoctl = 0,
  IOCTL_ID__GetConfig = 1,
  IOCTL_ID__SetConfig = 2,
  IOCTL_ID__ReadVbatt = 3,
  IOCTL_ID__FiveBaudInit = 4,
  IOCTL_ID__FastInit = 5,
  IOCTL_ID__ClearTxBuffer = 7,
  IOCTL_ID__ClearRxBuffer = 8,
  IOCTL_ID__ClearPeriodic = 9,
  IOCTL_ID__ClearFilters = 10,
  IOCTL_ID__ClearLUT = 11,
  IOCTL_ID__AddLUT = 12,
  IOCTL_ID__DeleteLUT = 13,
  IOCTL_ID__ReadVoltage = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IOCTL_ID)
} IoctlId;

/* --- messages --- */

struct  Message
{
  ProtobufCMessage base;
  uint32_t protocol;
  uint32_t rx_status;
  uint32_t tx_flags;
  uint32_t timestamp;
  uint32_t extra_data_index;
  ProtobufCBinaryData data;
};
#define MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message__descriptor) \
, 0, 0, 0, 0, 0, {0,NULL} }


struct  Config
{
  ProtobufCMessage base;
  uint32_t parameter;
  uint32_t value;
};
#define CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__descriptor) \
, 0, 0 }


struct  BaseRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
};
#define BASE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&base_request__descriptor) \
, 0, CALL__InvalidCall }


struct  BaseResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
};
#define BASE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&base_response__descriptor) \
, 0, CALL__InvalidCall, 0 }


struct  ConnectRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t protocol;
  uint32_t flags;
  uint32_t baud;
};
#define CONNECT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&connect_request__descriptor) \
, 0, CALL__InvalidCall, 0, 0, 0 }


struct  ConnectResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
  uint32_t channel;
};
#define CONNECT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&connect_response__descriptor) \
, 0, CALL__InvalidCall, 0, 0 }


struct  DisconnectRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t channel;
};
#define DISCONNECT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&disconnect_request__descriptor) \
, 0, CALL__InvalidCall, 0 }


struct  ReadRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t channel;
  uint32_t num;
  uint32_t timeout;
};
#define READ_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&read_request__descriptor) \
, 0, CALL__InvalidCall, 0, 0, 0 }


struct  ReadResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
  size_t n_messages;
  Message **messages;
};
#define READ_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&read_response__descriptor) \
, 0, CALL__InvalidCall, 0, 0,NULL }


struct  WriteRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t channel;
  size_t n_messages;
  Message **messages;
  uint32_t timeout;
};
#define WRITE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&write_request__descriptor) \
, 0, CALL__InvalidCall, 0, 0,NULL, 0 }


struct  WriteResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
  uint32_t num;
};
#define WRITE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&write_response__descriptor) \
, 0, CALL__InvalidCall, 0, 0 }


struct  StartPeriodicRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t channel;
  Message *message;
  uint32_t interval;
};
#define START_PERIODIC_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_periodic_request__descriptor) \
, 0, CALL__InvalidCall, 0, NULL, 0 }


struct  StartPeriodicResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
  uint32_t message_id;
};
#define START_PERIODIC_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_periodic_response__descriptor) \
, 0, CALL__InvalidCall, 0, 0 }


struct  StopPeriodicRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t channel;
  uint32_t message_id;
};
#define STOP_PERIODIC_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stop_periodic_request__descriptor) \
, 0, CALL__InvalidCall, 0, 0 }


struct  StartFilterRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t channel;
  uint32_t filter_type;
  Message *mask;
  Message *pattern;
  Message *flow_control;
};
#define START_FILTER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_filter_request__descriptor) \
, 0, CALL__InvalidCall, 0, 0, NULL, NULL, NULL }


struct  StartFilterResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
  uint32_t filter_id;
};
#define START_FILTER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&start_filter_response__descriptor) \
, 0, CALL__InvalidCall, 0, 0 }


struct  StopFilterRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t channel;
  uint32_t filter_id;
};
#define STOP_FILTER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&stop_filter_request__descriptor) \
, 0, CALL__InvalidCall, 0, 0 }


struct  SetVoltageRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t pin;
  uint32_t voltage;
};
#define SET_VOLTAGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_voltage_request__descriptor) \
, 0, CALL__InvalidCall, 0, 0 }


struct  ReadVersionResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
  char *version;
};
#define READ_VERSION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&read_version_response__descriptor) \
, 0, CALL__InvalidCall, 0, (char *)protobuf_c_empty_string }


struct  GetErrorResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
  char *error;
};
#define GET_ERROR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_error_response__descriptor) \
, 0, CALL__InvalidCall, 0, (char *)protobuf_c_empty_string }


struct  IoctlRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t channel;
  IoctlId ioctl;
};
#define IOCTL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ioctl_request__descriptor) \
, 0, CALL__InvalidCall, 0, IOCTL_ID__InvalidIoctl }


struct  IoctlResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
  IoctlId ioctl;
};
#define IOCTL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ioctl_response__descriptor) \
, 0, CALL__InvalidCall, 0, IOCTL_ID__InvalidIoctl }


struct  IoctlGetConfigRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t channel;
  IoctlId ioctl;
  size_t n_config;
  Config **config;
};
#define IOCTL_GET_CONFIG_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ioctl_get_config_request__descriptor) \
, 0, CALL__InvalidCall, 0, IOCTL_ID__InvalidIoctl, 0,NULL }


struct  IoctlGetConfigResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
  IoctlId ioctl;
  size_t n_config;
  Config **config;
};
#define IOCTL_GET_CONFIG_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ioctl_get_config_response__descriptor) \
, 0, CALL__InvalidCall, 0, IOCTL_ID__InvalidIoctl, 0,NULL }


struct  IoctlSetConfigRequest
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t channel;
  IoctlId ioctl;
  size_t n_config;
  Config **config;
};
#define IOCTL_SET_CONFIG_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ioctl_set_config_request__descriptor) \
, 0, CALL__InvalidCall, 0, IOCTL_ID__InvalidIoctl, 0,NULL }


struct  IoctlReadVbattResponse
{
  ProtobufCMessage base;
  uint32_t id;
  Call call;
  uint32_t code;
  IoctlId ioctl;
  uint32_t voltage;
};
#define IOCTL_READ_VBATT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ioctl_read_vbatt_response__descriptor) \
, 0, CALL__InvalidCall, 0, IOCTL_ID__InvalidIoctl, 0 }


/* Message methods */
void   message__init
                     (Message         *message);
size_t message__get_packed_size
                     (const Message   *message);
size_t message__pack
                     (const Message   *message,
                      uint8_t             *out);
size_t message__pack_to_buffer
                     (const Message   *message,
                      ProtobufCBuffer     *buffer);
Message *
       message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message__free_unpacked
                     (Message *message,
                      ProtobufCAllocator *allocator);
/* Config methods */
void   config__init
                     (Config         *message);
size_t config__get_packed_size
                     (const Config   *message);
size_t config__pack
                     (const Config   *message,
                      uint8_t             *out);
size_t config__pack_to_buffer
                     (const Config   *message,
                      ProtobufCBuffer     *buffer);
Config *
       config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__free_unpacked
                     (Config *message,
                      ProtobufCAllocator *allocator);
/* BaseRequest methods */
void   base_request__init
                     (BaseRequest         *message);
size_t base_request__get_packed_size
                     (const BaseRequest   *message);
size_t base_request__pack
                     (const BaseRequest   *message,
                      uint8_t             *out);
size_t base_request__pack_to_buffer
                     (const BaseRequest   *message,
                      ProtobufCBuffer     *buffer);
BaseRequest *
       base_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   base_request__free_unpacked
                     (BaseRequest *message,
                      ProtobufCAllocator *allocator);
/* BaseResponse methods */
void   base_response__init
                     (BaseResponse         *message);
size_t base_response__get_packed_size
                     (const BaseResponse   *message);
size_t base_response__pack
                     (const BaseResponse   *message,
                      uint8_t             *out);
size_t base_response__pack_to_buffer
                     (const BaseResponse   *message,
                      ProtobufCBuffer     *buffer);
BaseResponse *
       base_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   base_response__free_unpacked
                     (BaseResponse *message,
                      ProtobufCAllocator *allocator);
/* ConnectRequest methods */
void   connect_request__init
                     (ConnectRequest         *message);
size_t connect_request__get_packed_size
                     (const ConnectRequest   *message);
size_t connect_request__pack
                     (const ConnectRequest   *message,
                      uint8_t             *out);
size_t connect_request__pack_to_buffer
                     (const ConnectRequest   *message,
                      ProtobufCBuffer     *buffer);
ConnectRequest *
       connect_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   connect_request__free_unpacked
                     (ConnectRequest *message,
                      ProtobufCAllocator *allocator);
/* ConnectResponse methods */
void   connect_response__init
                     (ConnectResponse         *message);
size_t connect_response__get_packed_size
                     (const ConnectResponse   *message);
size_t connect_response__pack
                     (const ConnectResponse   *message,
                      uint8_t             *out);
size_t connect_response__pack_to_buffer
                     (const ConnectResponse   *message,
                      ProtobufCBuffer     *buffer);
ConnectResponse *
       connect_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   connect_response__free_unpacked
                     (ConnectResponse *message,
                      ProtobufCAllocator *allocator);
/* DisconnectRequest methods */
void   disconnect_request__init
                     (DisconnectRequest         *message);
size_t disconnect_request__get_packed_size
                     (const DisconnectRequest   *message);
size_t disconnect_request__pack
                     (const DisconnectRequest   *message,
                      uint8_t             *out);
size_t disconnect_request__pack_to_buffer
                     (const DisconnectRequest   *message,
                      ProtobufCBuffer     *buffer);
DisconnectRequest *
       disconnect_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   disconnect_request__free_unpacked
                     (DisconnectRequest *message,
                      ProtobufCAllocator *allocator);
/* ReadRequest methods */
void   read_request__init
                     (ReadRequest         *message);
size_t read_request__get_packed_size
                     (const ReadRequest   *message);
size_t read_request__pack
                     (const ReadRequest   *message,
                      uint8_t             *out);
size_t read_request__pack_to_buffer
                     (const ReadRequest   *message,
                      ProtobufCBuffer     *buffer);
ReadRequest *
       read_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   read_request__free_unpacked
                     (ReadRequest *message,
                      ProtobufCAllocator *allocator);
/* ReadResponse methods */
void   read_response__init
                     (ReadResponse         *message);
size_t read_response__get_packed_size
                     (const ReadResponse   *message);
size_t read_response__pack
                     (const ReadResponse   *message,
                      uint8_t             *out);
size_t read_response__pack_to_buffer
                     (const ReadResponse   *message,
                      ProtobufCBuffer     *buffer);
ReadResponse *
       read_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   read_response__free_unpacked
                     (ReadResponse *message,
                      ProtobufCAllocator *allocator);
/* WriteRequest methods */
void   write_request__init
                     (WriteRequest         *message);
size_t write_request__get_packed_size
                     (const WriteRequest   *message);
size_t write_request__pack
                     (const WriteRequest   *message,
                      uint8_t             *out);
size_t write_request__pack_to_buffer
                     (const WriteRequest   *message,
                      ProtobufCBuffer     *buffer);
WriteRequest *
       write_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   write_request__free_unpacked
                     (WriteRequest *message,
                      ProtobufCAllocator *allocator);
/* WriteResponse methods */
void   write_response__init
                     (WriteResponse         *message);
size_t write_response__get_packed_size
                     (const WriteResponse   *message);
size_t write_response__pack
                     (const WriteResponse   *message,
                      uint8_t             *out);
size_t write_response__pack_to_buffer
                     (const WriteResponse   *message,
                      ProtobufCBuffer     *buffer);
WriteResponse *
       write_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   write_response__free_unpacked
                     (WriteResponse *message,
                      ProtobufCAllocator *allocator);
/* StartPeriodicRequest methods */
void   start_periodic_request__init
                     (StartPeriodicRequest         *message);
size_t start_periodic_request__get_packed_size
                     (const StartPeriodicRequest   *message);
size_t start_periodic_request__pack
                     (const StartPeriodicRequest   *message,
                      uint8_t             *out);
size_t start_periodic_request__pack_to_buffer
                     (const StartPeriodicRequest   *message,
                      ProtobufCBuffer     *buffer);
StartPeriodicRequest *
       start_periodic_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_periodic_request__free_unpacked
                     (StartPeriodicRequest *message,
                      ProtobufCAllocator *allocator);
/* StartPeriodicResponse methods */
void   start_periodic_response__init
                     (StartPeriodicResponse         *message);
size_t start_periodic_response__get_packed_size
                     (const StartPeriodicResponse   *message);
size_t start_periodic_response__pack
                     (const StartPeriodicResponse   *message,
                      uint8_t             *out);
size_t start_periodic_response__pack_to_buffer
                     (const StartPeriodicResponse   *message,
                      ProtobufCBuffer     *buffer);
StartPeriodicResponse *
       start_periodic_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_periodic_response__free_unpacked
                     (StartPeriodicResponse *message,
                      ProtobufCAllocator *allocator);
/* StopPeriodicRequest methods */
void   stop_periodic_request__init
                     (StopPeriodicRequest         *message);
size_t stop_periodic_request__get_packed_size
                     (const StopPeriodicRequest   *message);
size_t stop_periodic_request__pack
                     (const StopPeriodicRequest   *message,
                      uint8_t             *out);
size_t stop_periodic_request__pack_to_buffer
                     (const StopPeriodicRequest   *message,
                      ProtobufCBuffer     *buffer);
StopPeriodicRequest *
       stop_periodic_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stop_periodic_request__free_unpacked
                     (StopPeriodicRequest *message,
                      ProtobufCAllocator *allocator);
/* StartFilterRequest methods */
void   start_filter_request__init
                     (StartFilterRequest         *message);
size_t start_filter_request__get_packed_size
                     (const StartFilterRequest   *message);
size_t start_filter_request__pack
                     (const StartFilterRequest   *message,
                      uint8_t             *out);
size_t start_filter_request__pack_to_buffer
                     (const StartFilterRequest   *message,
                      ProtobufCBuffer     *buffer);
StartFilterRequest *
       start_filter_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_filter_request__free_unpacked
                     (StartFilterRequest *message,
                      ProtobufCAllocator *allocator);
/* StartFilterResponse methods */
void   start_filter_response__init
                     (StartFilterResponse         *message);
size_t start_filter_response__get_packed_size
                     (const StartFilterResponse   *message);
size_t start_filter_response__pack
                     (const StartFilterResponse   *message,
                      uint8_t             *out);
size_t start_filter_response__pack_to_buffer
                     (const StartFilterResponse   *message,
                      ProtobufCBuffer     *buffer);
StartFilterResponse *
       start_filter_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   start_filter_response__free_unpacked
                     (StartFilterResponse *message,
                      ProtobufCAllocator *allocator);
/* StopFilterRequest methods */
void   stop_filter_request__init
                     (StopFilterRequest         *message);
size_t stop_filter_request__get_packed_size
                     (const StopFilterRequest   *message);
size_t stop_filter_request__pack
                     (const StopFilterRequest   *message,
                      uint8_t             *out);
size_t stop_filter_request__pack_to_buffer
                     (const StopFilterRequest   *message,
                      ProtobufCBuffer     *buffer);
StopFilterRequest *
       stop_filter_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   stop_filter_request__free_unpacked
                     (StopFilterRequest *message,
                      ProtobufCAllocator *allocator);
/* SetVoltageRequest methods */
void   set_voltage_request__init
                     (SetVoltageRequest         *message);
size_t set_voltage_request__get_packed_size
                     (const SetVoltageRequest   *message);
size_t set_voltage_request__pack
                     (const SetVoltageRequest   *message,
                      uint8_t             *out);
size_t set_voltage_request__pack_to_buffer
                     (const SetVoltageRequest   *message,
                      ProtobufCBuffer     *buffer);
SetVoltageRequest *
       set_voltage_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_voltage_request__free_unpacked
                     (SetVoltageRequest *message,
                      ProtobufCAllocator *allocator);
/* ReadVersionResponse methods */
void   read_version_response__init
                     (ReadVersionResponse         *message);
size_t read_version_response__get_packed_size
                     (const ReadVersionResponse   *message);
size_t read_version_response__pack
                     (const ReadVersionResponse   *message,
                      uint8_t             *out);
size_t read_version_response__pack_to_buffer
                     (const ReadVersionResponse   *message,
                      ProtobufCBuffer     *buffer);
ReadVersionResponse *
       read_version_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   read_version_response__free_unpacked
                     (ReadVersionResponse *message,
                      ProtobufCAllocator *allocator);
/* GetErrorResponse methods */
void   get_error_response__init
                     (GetErrorResponse         *message);
size_t get_error_response__get_packed_size
                     (const GetErrorResponse   *message);
size_t get_error_response__pack
                     (const GetErrorResponse   *message,
                      uint8_t             *out);
size_t get_error_response__pack_to_buffer
                     (const GetErrorResponse   *message,
                      ProtobufCBuffer     *buffer);
GetErrorResponse *
       get_error_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_error_response__free_unpacked
                     (GetErrorResponse *message,
                      ProtobufCAllocator *allocator);
/* IoctlRequest methods */
void   ioctl_request__init
                     (IoctlRequest         *message);
size_t ioctl_request__get_packed_size
                     (const IoctlRequest   *message);
size_t ioctl_request__pack
                     (const IoctlRequest   *message,
                      uint8_t             *out);
size_t ioctl_request__pack_to_buffer
                     (const IoctlRequest   *message,
                      ProtobufCBuffer     *buffer);
IoctlRequest *
       ioctl_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ioctl_request__free_unpacked
                     (IoctlRequest *message,
                      ProtobufCAllocator *allocator);
/* IoctlResponse methods */
void   ioctl_response__init
                     (IoctlResponse         *message);
size_t ioctl_response__get_packed_size
                     (const IoctlResponse   *message);
size_t ioctl_response__pack
                     (const IoctlResponse   *message,
                      uint8_t             *out);
size_t ioctl_response__pack_to_buffer
                     (const IoctlResponse   *message,
                      ProtobufCBuffer     *buffer);
IoctlResponse *
       ioctl_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ioctl_response__free_unpacked
                     (IoctlResponse *message,
                      ProtobufCAllocator *allocator);
/* IoctlGetConfigRequest methods */
void   ioctl_get_config_request__init
                     (IoctlGetConfigRequest         *message);
size_t ioctl_get_config_request__get_packed_size
                     (const IoctlGetConfigRequest   *message);
size_t ioctl_get_config_request__pack
                     (const IoctlGetConfigRequest   *message,
                      uint8_t             *out);
size_t ioctl_get_config_request__pack_to_buffer
                     (const IoctlGetConfigRequest   *message,
                      ProtobufCBuffer     *buffer);
IoctlGetConfigRequest *
       ioctl_get_config_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ioctl_get_config_request__free_unpacked
                     (IoctlGetConfigRequest *message,
                      ProtobufCAllocator *allocator);
/* IoctlGetConfigResponse methods */
void   ioctl_get_config_response__init
                     (IoctlGetConfigResponse         *message);
size_t ioctl_get_config_response__get_packed_size
                     (const IoctlGetConfigResponse   *message);
size_t ioctl_get_config_response__pack
                     (const IoctlGetConfigResponse   *message,
                      uint8_t             *out);
size_t ioctl_get_config_response__pack_to_buffer
                     (const IoctlGetConfigResponse   *message,
                      ProtobufCBuffer     *buffer);
IoctlGetConfigResponse *
       ioctl_get_config_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ioctl_get_config_response__free_unpacked
                     (IoctlGetConfigResponse *message,
                      ProtobufCAllocator *allocator);
/* IoctlSetConfigRequest methods */
void   ioctl_set_config_request__init
                     (IoctlSetConfigRequest         *message);
size_t ioctl_set_config_request__get_packed_size
                     (const IoctlSetConfigRequest   *message);
size_t ioctl_set_config_request__pack
                     (const IoctlSetConfigRequest   *message,
                      uint8_t             *out);
size_t ioctl_set_config_request__pack_to_buffer
                     (const IoctlSetConfigRequest   *message,
                      ProtobufCBuffer     *buffer);
IoctlSetConfigRequest *
       ioctl_set_config_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ioctl_set_config_request__free_unpacked
                     (IoctlSetConfigRequest *message,
                      ProtobufCAllocator *allocator);
/* IoctlReadVbattResponse methods */
void   ioctl_read_vbatt_response__init
                     (IoctlReadVbattResponse         *message);
size_t ioctl_read_vbatt_response__get_packed_size
                     (const IoctlReadVbattResponse   *message);
size_t ioctl_read_vbatt_response__pack
                     (const IoctlReadVbattResponse   *message,
                      uint8_t             *out);
size_t ioctl_read_vbatt_response__pack_to_buffer
                     (const IoctlReadVbattResponse   *message,
                      ProtobufCBuffer     *buffer);
IoctlReadVbattResponse *
       ioctl_read_vbatt_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ioctl_read_vbatt_response__free_unpacked
                     (IoctlReadVbattResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Message_Closure)
                 (const Message *message,
                  void *closure_data);
typedef void (*Config_Closure)
                 (const Config *message,
                  void *closure_data);
typedef void (*BaseRequest_Closure)
                 (const BaseRequest *message,
                  void *closure_data);
typedef void (*BaseResponse_Closure)
                 (const BaseResponse *message,
                  void *closure_data);
typedef void (*ConnectRequest_Closure)
                 (const ConnectRequest *message,
                  void *closure_data);
typedef void (*ConnectResponse_Closure)
                 (const ConnectResponse *message,
                  void *closure_data);
typedef void (*DisconnectRequest_Closure)
                 (const DisconnectRequest *message,
                  void *closure_data);
typedef void (*ReadRequest_Closure)
                 (const ReadRequest *message,
                  void *closure_data);
typedef void (*ReadResponse_Closure)
                 (const ReadResponse *message,
                  void *closure_data);
typedef void (*WriteRequest_Closure)
                 (const WriteRequest *message,
                  void *closure_data);
typedef void (*WriteResponse_Closure)
                 (const WriteResponse *message,
                  void *closure_data);
typedef void (*StartPeriodicRequest_Closure)
                 (const StartPeriodicRequest *message,
                  void *closure_data);
typedef void (*StartPeriodicResponse_Closure)
                 (const StartPeriodicResponse *message,
                  void *closure_data);
typedef void (*StopPeriodicRequest_Closure)
                 (const StopPeriodicRequest *message,
                  void *closure_data);
typedef void (*StartFilterRequest_Closure)
                 (const StartFilterRequest *message,
                  void *closure_data);
typedef void (*StartFilterResponse_Closure)
                 (const StartFilterResponse *message,
                  void *closure_data);
typedef void (*StopFilterRequest_Closure)
                 (const StopFilterRequest *message,
                  void *closure_data);
typedef void (*SetVoltageRequest_Closure)
                 (const SetVoltageRequest *message,
                  void *closure_data);
typedef void (*ReadVersionResponse_Closure)
                 (const ReadVersionResponse *message,
                  void *closure_data);
typedef void (*GetErrorResponse_Closure)
                 (const GetErrorResponse *message,
                  void *closure_data);
typedef void (*IoctlRequest_Closure)
                 (const IoctlRequest *message,
                  void *closure_data);
typedef void (*IoctlResponse_Closure)
                 (const IoctlResponse *message,
                  void *closure_data);
typedef void (*IoctlGetConfigRequest_Closure)
                 (const IoctlGetConfigRequest *message,
                  void *closure_data);
typedef void (*IoctlGetConfigResponse_Closure)
                 (const IoctlGetConfigResponse *message,
                  void *closure_data);
typedef void (*IoctlSetConfigRequest_Closure)
                 (const IoctlSetConfigRequest *message,
                  void *closure_data);
typedef void (*IoctlReadVbattResponse_Closure)
                 (const IoctlReadVbattResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    call__descriptor;
extern const ProtobufCEnumDescriptor    ioctl_id__descriptor;
extern const ProtobufCMessageDescriptor message__descriptor;
extern const ProtobufCMessageDescriptor config__descriptor;
extern const ProtobufCMessageDescriptor base_request__descriptor;
extern const ProtobufCMessageDescriptor base_response__descriptor;
extern const ProtobufCMessageDescriptor connect_request__descriptor;
extern const ProtobufCMessageDescriptor connect_response__descriptor;
extern const ProtobufCMessageDescriptor disconnect_request__descriptor;
extern const ProtobufCMessageDescriptor read_request__descriptor;
extern const ProtobufCMessageDescriptor read_response__descriptor;
extern const ProtobufCMessageDescriptor write_request__descriptor;
extern const ProtobufCMessageDescriptor write_response__descriptor;
extern const ProtobufCMessageDescriptor start_periodic_request__descriptor;
extern const ProtobufCMessageDescriptor start_periodic_response__descriptor;
extern const ProtobufCMessageDescriptor stop_periodic_request__descriptor;
extern const ProtobufCMessageDescriptor start_filter_request__descriptor;
extern const ProtobufCMessageDescriptor start_filter_response__descriptor;
extern const ProtobufCMessageDescriptor stop_filter_request__descriptor;
extern const ProtobufCMessageDescriptor set_voltage_request__descriptor;
extern const ProtobufCMessageDescriptor read_version_response__descriptor;
extern const ProtobufCMessageDescriptor get_error_response__descriptor;
extern const ProtobufCMessageDescriptor ioctl_request__descriptor;
extern const ProtobufCMessageDescriptor ioctl_response__descriptor;
extern const ProtobufCMessageDescriptor ioctl_get_config_request__descriptor;
extern const ProtobufCMessageDescriptor ioctl_get_config_response__descriptor;
extern const ProtobufCMessageDescriptor ioctl_set_config_request__descriptor;
extern const ProtobufCMessageDescriptor ioctl_read_vbatt_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_j2534_2eproto__INCLUDED */
